// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file scalekit/v1/errdetails/errdetails.proto (package scalekit.v1.errdetails, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message scalekit.v1.errdetails.ErrorInfo
 */
export class ErrorInfo extends Message<ErrorInfo> {
  /**
   * @generated from field: string error_code = 1;
   */
  errorCode = "";

  /**
   * @generated from field: optional scalekit.v1.errdetails.DebugInfo debug_info = 2;
   */
  debugInfo?: DebugInfo;

  /**
   * @generated from field: optional scalekit.v1.errdetails.HelpInfo help_info = 3;
   */
  helpInfo?: HelpInfo;

  /**
   * @generated from field: optional scalekit.v1.errdetails.LocalizedMessageInfo localized_message_info = 4;
   */
  localizedMessageInfo?: LocalizedMessageInfo;

  /**
   * @generated from field: optional scalekit.v1.errdetails.ResourceInfo resource_info = 5;
   */
  resourceInfo?: ResourceInfo;

  /**
   * @generated from field: optional scalekit.v1.errdetails.RequestInfo request_info = 6;
   */
  requestInfo?: RequestInfo;

  /**
   * @generated from field: optional scalekit.v1.errdetails.ValidationErrorInfo validation_error_info = 8;
   */
  validationErrorInfo?: ValidationErrorInfo;

  constructor(data?: PartialMessage<ErrorInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.ErrorInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "debug_info", kind: "message", T: DebugInfo, opt: true },
    { no: 3, name: "help_info", kind: "message", T: HelpInfo, opt: true },
    { no: 4, name: "localized_message_info", kind: "message", T: LocalizedMessageInfo, opt: true },
    { no: 5, name: "resource_info", kind: "message", T: ResourceInfo, opt: true },
    { no: 6, name: "request_info", kind: "message", T: RequestInfo, opt: true },
    { no: 8, name: "validation_error_info", kind: "message", T: ValidationErrorInfo, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorInfo {
    return new ErrorInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorInfo {
    return new ErrorInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorInfo {
    return new ErrorInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ErrorInfo | PlainMessage<ErrorInfo> | undefined, b: ErrorInfo | PlainMessage<ErrorInfo> | undefined): boolean {
    return proto3.util.equals(ErrorInfo, a, b);
  }
}

/**
 * Describes additional debugging info.
 *
 * @generated from message scalekit.v1.errdetails.DebugInfo
 */
export class DebugInfo extends Message<DebugInfo> {
  /**
   * The stack trace entries indicating where the error occurred.
   *
   * @generated from field: repeated string stack_entries = 1;
   */
  stackEntries: string[] = [];

  /**
   * Additional debugging information provided by the server.
   *
   * @generated from field: string detail = 2;
   */
  detail = "";

  constructor(data?: PartialMessage<DebugInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.DebugInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stack_entries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "detail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebugInfo {
    return new DebugInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebugInfo {
    return new DebugInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebugInfo {
    return new DebugInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DebugInfo | PlainMessage<DebugInfo> | undefined, b: DebugInfo | PlainMessage<DebugInfo> | undefined): boolean {
    return proto3.util.equals(DebugInfo, a, b);
  }
}

/**
 * Describes violations in a client request. This error type focuses on the
 * syntactic aspects of the request.
 *
 * @generated from message scalekit.v1.errdetails.ValidationErrorInfo
 */
export class ValidationErrorInfo extends Message<ValidationErrorInfo> {
  /**
   * Describes all violations in a client request.
   *
   * @generated from field: repeated scalekit.v1.errdetails.ValidationErrorInfo.FieldViolation field_violations = 1;
   */
  fieldViolations: ValidationErrorInfo_FieldViolation[] = [];

  constructor(data?: PartialMessage<ValidationErrorInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.ValidationErrorInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_violations", kind: "message", T: ValidationErrorInfo_FieldViolation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationErrorInfo {
    return new ValidationErrorInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationErrorInfo {
    return new ValidationErrorInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationErrorInfo {
    return new ValidationErrorInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationErrorInfo | PlainMessage<ValidationErrorInfo> | undefined, b: ValidationErrorInfo | PlainMessage<ValidationErrorInfo> | undefined): boolean {
    return proto3.util.equals(ValidationErrorInfo, a, b);
  }
}

/**
 * A message type used to describe a single bad request field.
 *
 * @generated from message scalekit.v1.errdetails.ValidationErrorInfo.FieldViolation
 */
export class ValidationErrorInfo_FieldViolation extends Message<ValidationErrorInfo_FieldViolation> {
  /**
   * @generated from field: string field = 1;
   */
  field = "";

  /**
   * A description of why the request element is bad.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string constraint = 3;
   */
  constraint = "";

  constructor(data?: PartialMessage<ValidationErrorInfo_FieldViolation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.ValidationErrorInfo.FieldViolation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "constraint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationErrorInfo_FieldViolation {
    return new ValidationErrorInfo_FieldViolation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationErrorInfo_FieldViolation {
    return new ValidationErrorInfo_FieldViolation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationErrorInfo_FieldViolation {
    return new ValidationErrorInfo_FieldViolation().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationErrorInfo_FieldViolation | PlainMessage<ValidationErrorInfo_FieldViolation> | undefined, b: ValidationErrorInfo_FieldViolation | PlainMessage<ValidationErrorInfo_FieldViolation> | undefined): boolean {
    return proto3.util.equals(ValidationErrorInfo_FieldViolation, a, b);
  }
}

/**
 * Contains metadata about the request that clients can attach when filing a bug
 * or providing other forms of feedback.
 *
 * @generated from message scalekit.v1.errdetails.RequestInfo
 */
export class RequestInfo extends Message<RequestInfo> {
  /**
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   *
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   *
   * @generated from field: string serving_data = 2;
   */
  servingData = "";

  constructor(data?: PartialMessage<RequestInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.RequestInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serving_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestInfo {
    return new RequestInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestInfo {
    return new RequestInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestInfo {
    return new RequestInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RequestInfo | PlainMessage<RequestInfo> | undefined, b: RequestInfo | PlainMessage<RequestInfo> | undefined): boolean {
    return proto3.util.equals(RequestInfo, a, b);
  }
}

/**
 * Describes the resource that is being accessed.
 *
 * @generated from message scalekit.v1.errdetails.ResourceInfo
 */
export class ResourceInfo extends Message<ResourceInfo> {
  /**
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * @generated from field: string resource_name = 2;
   */
  resourceName = "";

  /**
   * @generated from field: string owner = 3;
   */
  owner = "";

  /**
   * Describes what error is encountered when accessing this resource.
   * For example, updating a cloud project may require the `writer` permission
   * on the developer console project.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<ResourceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.ResourceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceInfo {
    return new ResourceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceInfo {
    return new ResourceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceInfo {
    return new ResourceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceInfo | PlainMessage<ResourceInfo> | undefined, b: ResourceInfo | PlainMessage<ResourceInfo> | undefined): boolean {
    return proto3.util.equals(ResourceInfo, a, b);
  }
}

/**
 * @generated from message scalekit.v1.errdetails.HelpInfo
 */
export class HelpInfo extends Message<HelpInfo> {
  /**
   * @generated from field: repeated scalekit.v1.errdetails.HelpInfo.Link links = 1;
   */
  links: HelpInfo_Link[] = [];

  constructor(data?: PartialMessage<HelpInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.HelpInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "links", kind: "message", T: HelpInfo_Link, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpInfo {
    return new HelpInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpInfo {
    return new HelpInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpInfo {
    return new HelpInfo().fromJsonString(jsonString, options);
  }

  static equals(a: HelpInfo | PlainMessage<HelpInfo> | undefined, b: HelpInfo | PlainMessage<HelpInfo> | undefined): boolean {
    return proto3.util.equals(HelpInfo, a, b);
  }
}

/**
 * @generated from message scalekit.v1.errdetails.HelpInfo.Link
 */
export class HelpInfo_Link extends Message<HelpInfo_Link> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<HelpInfo_Link>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.HelpInfo.Link";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelpInfo_Link {
    return new HelpInfo_Link().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelpInfo_Link {
    return new HelpInfo_Link().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelpInfo_Link {
    return new HelpInfo_Link().fromJsonString(jsonString, options);
  }

  static equals(a: HelpInfo_Link | PlainMessage<HelpInfo_Link> | undefined, b: HelpInfo_Link | PlainMessage<HelpInfo_Link> | undefined): boolean {
    return proto3.util.equals(HelpInfo_Link, a, b);
  }
}

/**
 * @generated from message scalekit.v1.errdetails.LocalizedMessageInfo
 */
export class LocalizedMessageInfo extends Message<LocalizedMessageInfo> {
  /**
   * @generated from field: string locale = 1;
   */
  locale = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<LocalizedMessageInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.errdetails.LocalizedMessageInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalizedMessageInfo {
    return new LocalizedMessageInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalizedMessageInfo {
    return new LocalizedMessageInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalizedMessageInfo {
    return new LocalizedMessageInfo().fromJsonString(jsonString, options);
  }

  static equals(a: LocalizedMessageInfo | PlainMessage<LocalizedMessageInfo> | undefined, b: LocalizedMessageInfo | PlainMessage<LocalizedMessageInfo> | undefined): boolean {
    return proto3.util.equals(LocalizedMessageInfo, a, b);
  }
}

