// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file scalekit/v1/tools/tools.proto (package scalekit.v1.tools, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { BoolValue, Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message scalekit.v1.tools.CreateToolRequest
 */
export class CreateToolRequest extends Message<CreateToolRequest> {
  /**
   * @generated from field: scalekit.v1.tools.Tool tool = 1;
   */
  tool?: Tool;

  constructor(data?: PartialMessage<CreateToolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.CreateToolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "message", T: Tool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateToolRequest {
    return new CreateToolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateToolRequest {
    return new CreateToolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateToolRequest {
    return new CreateToolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateToolRequest | PlainMessage<CreateToolRequest> | undefined, b: CreateToolRequest | PlainMessage<CreateToolRequest> | undefined): boolean {
    return proto3.util.equals(CreateToolRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.CreateToolResponse
 */
export class CreateToolResponse extends Message<CreateToolResponse> {
  /**
   * @generated from field: scalekit.v1.tools.Tool tool = 1;
   */
  tool?: Tool;

  constructor(data?: PartialMessage<CreateToolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.CreateToolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "message", T: Tool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateToolResponse {
    return new CreateToolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateToolResponse {
    return new CreateToolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateToolResponse {
    return new CreateToolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateToolResponse | PlainMessage<CreateToolResponse> | undefined, b: CreateToolResponse | PlainMessage<CreateToolResponse> | undefined): boolean {
    return proto3.util.equals(CreateToolResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.Tool
 */
export class Tool extends Message<Tool> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string provider = 2;
   */
  provider = "";

  /**
   * @generated from field: google.protobuf.Struct definition = 3;
   */
  definition?: Struct;

  /**
   * @generated from field: google.protobuf.Struct metadata = 4;
   */
  metadata?: Struct;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[] = [];

  /**
   * @generated from field: google.protobuf.BoolValue is_default = 6;
   */
  isDefault?: boolean;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Tool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.Tool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "definition", kind: "message", T: Struct },
    { no: 4, name: "metadata", kind: "message", T: Struct },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "is_default", kind: "message", T: BoolValue },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tool {
    return new Tool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tool {
    return new Tool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tool {
    return new Tool().fromJsonString(jsonString, options);
  }

  static equals(a: Tool | PlainMessage<Tool> | undefined, b: Tool | PlainMessage<Tool> | undefined): boolean {
    return proto3.util.equals(Tool, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ScopedTool
 */
export class ScopedTool extends Message<ScopedTool> {
  /**
   * @generated from field: scalekit.v1.tools.Tool tool = 1;
   */
  tool?: Tool;

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = "";

  /**
   * @generated from field: string connected_account_id = 3;
   */
  connectedAccountId = "";

  constructor(data?: PartialMessage<ScopedTool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ScopedTool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "message", T: Tool },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connected_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedTool {
    return new ScopedTool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedTool {
    return new ScopedTool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedTool {
    return new ScopedTool().fromJsonString(jsonString, options);
  }

  static equals(a: ScopedTool | PlainMessage<ScopedTool> | undefined, b: ScopedTool | PlainMessage<ScopedTool> | undefined): boolean {
    return proto3.util.equals(ScopedTool, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ListToolsRequest
 */
export class ListToolsRequest extends Message<ListToolsRequest> {
  /**
   * @generated from field: scalekit.v1.tools.Filter filter = 1;
   */
  filter?: Filter;

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListToolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ListToolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: Filter },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListToolsRequest {
    return new ListToolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListToolsRequest {
    return new ListToolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListToolsRequest {
    return new ListToolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListToolsRequest | PlainMessage<ListToolsRequest> | undefined, b: ListToolsRequest | PlainMessage<ListToolsRequest> | undefined): boolean {
    return proto3.util.equals(ListToolsRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.Filter
 */
export class Filter extends Message<Filter> {
  /**
   * @generated from field: google.protobuf.BoolValue summary = 1;
   */
  summary?: boolean;

  /**
   * @generated from field: string provider = 2;
   */
  provider = "";

  /**
   * @generated from field: string identifier = 3;
   */
  identifier = "";

  /**
   * @generated from field: repeated string tool_name = 4;
   */
  toolName: string[] = [];

  /**
   * @generated from field: optional string query = 5;
   */
  query?: string;

  constructor(data?: PartialMessage<Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "message", T: BoolValue },
    { no: 2, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tool_name", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter {
    return new Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJsonString(jsonString, options);
  }

  static equals(a: Filter | PlainMessage<Filter> | undefined, b: Filter | PlainMessage<Filter> | undefined): boolean {
    return proto3.util.equals(Filter, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ListToolsResponse
 */
export class ListToolsResponse extends Message<ListToolsResponse> {
  /**
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * @generated from field: uint32 total_size = 2;
   */
  totalSize = 0;

  /**
   * @generated from field: string prev_page_token = 3;
   */
  prevPageToken = "";

  /**
   * @generated from field: repeated string tool_names = 4;
   */
  toolNames: string[] = [];

  /**
   * @generated from field: repeated scalekit.v1.tools.Tool tools = 5;
   */
  tools: Tool[] = [];

  constructor(data?: PartialMessage<ListToolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ListToolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "prev_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tool_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tools", kind: "message", T: Tool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListToolsResponse {
    return new ListToolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListToolsResponse {
    return new ListToolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListToolsResponse {
    return new ListToolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListToolsResponse | PlainMessage<ListToolsResponse> | undefined, b: ListToolsResponse | PlainMessage<ListToolsResponse> | undefined): boolean {
    return proto3.util.equals(ListToolsResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ExecuteToolRequest
 */
export class ExecuteToolRequest extends Message<ExecuteToolRequest> {
  /**
   * @generated from field: string tool_name = 1;
   */
  toolName = "";

  /**
   * @generated from field: optional string identifier = 2;
   */
  identifier?: string;

  /**
   * @generated from field: google.protobuf.Struct params = 3;
   */
  params?: Struct;

  /**
   * @generated from field: optional string connected_account_id = 4;
   */
  connectedAccountId?: string;

  /**
   * @generated from field: optional string connector = 5;
   */
  connector?: string;

  /**
   * @generated from field: optional string organization_id = 6;
   */
  organizationId?: string;

  /**
   * @generated from field: optional string user_id = 7;
   */
  userId?: string;

  constructor(data?: PartialMessage<ExecuteToolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ExecuteToolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "params", kind: "message", T: Struct },
    { no: 4, name: "connected_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteToolRequest {
    return new ExecuteToolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteToolRequest {
    return new ExecuteToolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteToolRequest {
    return new ExecuteToolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteToolRequest | PlainMessage<ExecuteToolRequest> | undefined, b: ExecuteToolRequest | PlainMessage<ExecuteToolRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteToolRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ExecuteToolResponse
 */
export class ExecuteToolResponse extends Message<ExecuteToolResponse> {
  /**
   * @generated from field: google.protobuf.Struct data = 1;
   */
  data?: Struct;

  /**
   * @generated from field: string execution_id = 2;
   */
  executionId = "";

  constructor(data?: PartialMessage<ExecuteToolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ExecuteToolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Struct },
    { no: 2, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteToolResponse {
    return new ExecuteToolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteToolResponse {
    return new ExecuteToolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteToolResponse {
    return new ExecuteToolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteToolResponse | PlainMessage<ExecuteToolResponse> | undefined, b: ExecuteToolResponse | PlainMessage<ExecuteToolResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteToolResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.SetToolDefaultRequest
 */
export class SetToolDefaultRequest extends Message<SetToolDefaultRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string schema_version = 2;
   */
  schemaVersion = "";

  /**
   * @generated from field: string tool_version = 3;
   */
  toolVersion = "";

  constructor(data?: PartialMessage<SetToolDefaultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.SetToolDefaultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tool_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetToolDefaultRequest {
    return new SetToolDefaultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetToolDefaultRequest {
    return new SetToolDefaultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetToolDefaultRequest {
    return new SetToolDefaultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetToolDefaultRequest | PlainMessage<SetToolDefaultRequest> | undefined, b: SetToolDefaultRequest | PlainMessage<SetToolDefaultRequest> | undefined): boolean {
    return proto3.util.equals(SetToolDefaultRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.SetToolDefaultResponse
 */
export class SetToolDefaultResponse extends Message<SetToolDefaultResponse> {
  /**
   * @generated from field: scalekit.v1.tools.Tool tool = 1;
   */
  tool?: Tool;

  constructor(data?: PartialMessage<SetToolDefaultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.SetToolDefaultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "message", T: Tool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetToolDefaultResponse {
    return new SetToolDefaultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetToolDefaultResponse {
    return new SetToolDefaultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetToolDefaultResponse {
    return new SetToolDefaultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetToolDefaultResponse | PlainMessage<SetToolDefaultResponse> | undefined, b: SetToolDefaultResponse | PlainMessage<SetToolDefaultResponse> | undefined): boolean {
    return proto3.util.equals(SetToolDefaultResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.UpdateToolRequest
 */
export class UpdateToolRequest extends Message<UpdateToolRequest> {
  /**
   * @generated from field: scalekit.v1.tools.Tool tool = 1;
   */
  tool?: Tool;

  constructor(data?: PartialMessage<UpdateToolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.UpdateToolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "message", T: Tool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateToolRequest {
    return new UpdateToolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateToolRequest {
    return new UpdateToolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateToolRequest {
    return new UpdateToolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateToolRequest | PlainMessage<UpdateToolRequest> | undefined, b: UpdateToolRequest | PlainMessage<UpdateToolRequest> | undefined): boolean {
    return proto3.util.equals(UpdateToolRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.UpdateToolResponse
 */
export class UpdateToolResponse extends Message<UpdateToolResponse> {
  /**
   * @generated from field: scalekit.v1.tools.Tool tool = 1;
   */
  tool?: Tool;

  constructor(data?: PartialMessage<UpdateToolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.UpdateToolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool", kind: "message", T: Tool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateToolResponse {
    return new UpdateToolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateToolResponse {
    return new UpdateToolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateToolResponse {
    return new UpdateToolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateToolResponse | PlainMessage<UpdateToolResponse> | undefined, b: UpdateToolResponse | PlainMessage<UpdateToolResponse> | undefined): boolean {
    return proto3.util.equals(UpdateToolResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.DeleteToolRequest
 */
export class DeleteToolRequest extends Message<DeleteToolRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteToolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.DeleteToolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteToolRequest {
    return new DeleteToolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteToolRequest {
    return new DeleteToolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteToolRequest {
    return new DeleteToolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteToolRequest | PlainMessage<DeleteToolRequest> | undefined, b: DeleteToolRequest | PlainMessage<DeleteToolRequest> | undefined): boolean {
    return proto3.util.equals(DeleteToolRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ListScopedToolsRequest
 */
export class ListScopedToolsRequest extends Message<ListScopedToolsRequest> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = "";

  /**
   * @generated from field: scalekit.v1.tools.ScopedToolFilter filter = 2;
   */
  filter?: ScopedToolFilter;

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListScopedToolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ListScopedToolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: ScopedToolFilter },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListScopedToolsRequest {
    return new ListScopedToolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListScopedToolsRequest {
    return new ListScopedToolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListScopedToolsRequest {
    return new ListScopedToolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListScopedToolsRequest | PlainMessage<ListScopedToolsRequest> | undefined, b: ListScopedToolsRequest | PlainMessage<ListScopedToolsRequest> | undefined): boolean {
    return proto3.util.equals(ListScopedToolsRequest, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ListScopedToolsResponse
 */
export class ListScopedToolsResponse extends Message<ListScopedToolsResponse> {
  /**
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * @generated from field: uint32 total_size = 2;
   */
  totalSize = 0;

  /**
   * @generated from field: string prev_page_token = 3;
   */
  prevPageToken = "";

  /**
   * @generated from field: repeated scalekit.v1.tools.ScopedTool tools = 5;
   */
  tools: ScopedTool[] = [];

  constructor(data?: PartialMessage<ListScopedToolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ListScopedToolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "prev_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tools", kind: "message", T: ScopedTool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListScopedToolsResponse {
    return new ListScopedToolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListScopedToolsResponse {
    return new ListScopedToolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListScopedToolsResponse {
    return new ListScopedToolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListScopedToolsResponse | PlainMessage<ListScopedToolsResponse> | undefined, b: ListScopedToolsResponse | PlainMessage<ListScopedToolsResponse> | undefined): boolean {
    return proto3.util.equals(ListScopedToolsResponse, a, b);
  }
}

/**
 * @generated from message scalekit.v1.tools.ScopedToolFilter
 */
export class ScopedToolFilter extends Message<ScopedToolFilter> {
  /**
   * @generated from field: repeated string providers = 1;
   */
  providers: string[] = [];

  /**
   * @generated from field: repeated string tool_names = 2;
   */
  toolNames: string[] = [];

  /**
   * @generated from field: repeated string connection_names = 3;
   */
  connectionNames: string[] = [];

  constructor(data?: PartialMessage<ScopedToolFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scalekit.v1.tools.ScopedToolFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "tool_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "connection_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScopedToolFilter {
    return new ScopedToolFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScopedToolFilter {
    return new ScopedToolFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScopedToolFilter {
    return new ScopedToolFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ScopedToolFilter | PlainMessage<ScopedToolFilter> | undefined, b: ScopedToolFilter | PlainMessage<ScopedToolFilter> | undefined): boolean {
    return proto3.util.equals(ScopedToolFilter, a, b);
  }
}

